{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/03_tryunfo/src/App.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Filters from './components/Filters';\nimport Card from './components/Card';\nimport Footer from './components/Footer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  cardName: '',\n  cardDescription: '',\n  cardAttr1: '0',\n  cardAttr2: '0',\n  cardAttr3: '0',\n  cardImage: '',\n  cardRare: 'Normal',\n  cardTrunfo: false,\n  hasTrunfo: false,\n  isSaveButtonDisabled: true,\n  savedCards: [],\n  searchBoxData: '',\n  rarityFilter: 'Todas'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.verifyAllInputs = () => {\n      // Função que habilita o botão 'salvar', quando todos os campos do formulário forem preenchidos corretamente. Será chamada dentro da função onInputChange(), que é chamada dentro de escutadores do tipo 'onChange'.\n      const {\n        cardName,\n        cardDescription,\n        cardAttr1,\n        cardAttr2,\n        cardAttr3,\n        cardImage,\n        cardRare\n      } = this.state;\n      const attrSum = Number(cardAttr1) + Number(cardAttr2) + Number(cardAttr3);\n      const attrSumMaxValue = 210;\n      const attrMin = 0;\n      const attrMax = 90;\n\n      if (cardName.length >= 1 && cardDescription.length >= 1 && cardImage.length >= 1 && cardRare.length >= 1 && Number(cardAttr1) >= attrMin && Number(cardAttr1) <= attrMax && Number(cardAttr2) >= attrMin && Number(cardAttr2) <= attrMax && Number(cardAttr3) >= attrMin && Number(cardAttr3) <= attrMax && attrSum <= attrSumMaxValue) {\n        return this.setState({\n          isSaveButtonDisabled: false\n        });\n      }\n\n      return this.setState({\n        isSaveButtonDisabled: true\n      });\n    };\n\n    this.onInputChange = ({\n      target\n    }) => {\n      // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n      const {\n        name\n      } = target;\n      const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        // Aprendi a utilizar o 2° parâmetro da setState() na matéria \"Ciclo de Vida dos Componentes\", ainda não dada. Em suma, assim que o estado for atualizado, a callback passada como argumento, será rodada.\n        [name]: formElementValue\n      }, this.verifyAllInputs);\n    };\n\n    this.onSaveButtonClick = () => {\n      // Função que altera o estado 'hasTrunfo', de false para true, quando uma carta do tipo trunfo é salva.\n      // Função que salva as informações de uma respectiva carta, como um objeto dentro do array contido no estado 'savedCards'.\n      // Função que limpa os campos do formulário e o preview da carta.\n      const {\n        cardName,\n        cardDescription,\n        cardAttr1,\n        cardAttr2,\n        cardAttr3,\n        cardImage,\n        cardRare,\n        cardTrunfo\n      } = this.state;\n      const savedCardInfo = {\n        cardName,\n        cardDescription,\n        cardAttr1,\n        cardAttr2,\n        cardAttr3,\n        cardImage,\n        cardRare,\n        cardTrunfo\n      };\n\n      if (cardTrunfo === true) {\n        this.setState({\n          hasTrunfo: true\n        });\n      }\n\n      this.setState(prevState => ({\n        savedCards: [...prevState.savedCards, savedCardInfo],\n        cardName: '',\n        cardDescription: '',\n        cardAttr1: '0',\n        cardAttr2: '0',\n        cardAttr3: '0',\n        cardImage: '',\n        cardRare: 'Normal',\n        cardTrunfo: false,\n        isSaveButtonDisabled: true\n      }), () => localStorage.setItem('savedCards', JSON.stringify(this.state.savedCards))); // Salvando o estado 'savedCards', no Local Storage.\n    };\n\n    this.deleteDisplayedCard = ({\n      target\n    }) => {\n      // Função que possibilita a exclusão de uma carta criada anteriormente.\n      const {\n        savedCards\n      } = this.state;\n      const displayedCardId = target.id;\n      const toBeDel = savedCards.find(cardInfo => cardInfo.cardName === displayedCardId); // Retorna o objeto com as informações da carta recém-excluída.\n\n      const newSC = savedCards.filter(cardInfo => cardInfo.cardName !== displayedCardId); // Retorna o array contido no estado 'savedCards', porém sem o objeto referente à carta que foi excluída.\n\n      if (toBeDel.cardTrunfo === true) {\n        this.setState({\n          savedCards: newSC,\n          hasTrunfo: false\n        }, localStorage.setItem('savedCards', JSON.stringify(newSC))); // Salvando o estado 'savedCards', após a deleção, no Local Storage.\n      }\n\n      this.setState({\n        savedCards: newSC\n      }); // OBS: Caso a carta 'Super Trunfo' seja excluída, além de atualizar o estado 'savedCards' com o novo array de objetos 'newSC', o estado 'hasTrunfo' voltará a ser igual a False. Isso é importante para que o usuário seja capaz de criar uma nova carta do tipo 'Super Trunfo'.\n    };\n\n    this.filtersFunction = () => {\n      // Tal função sempre retornará um array de objetos, que acumula informações de cada uma das cartas. Por outro lado, dependendo dos filtros aplicados pelo usuário, o respectivo array apresentará uma quantidade reduzida de objetos.\n      const {\n        savedCards,\n        searchBoxData,\n        rarityFilter\n      } = this.state;\n\n      if (searchBoxData.length >= 1) {\n        return savedCards.filter(({\n          cardName\n        }) => cardName.toLowerCase().includes(searchBoxData.toLowerCase())); // Retornado quando o usuário pesquisar por uma determinada carta na searchbox.\n      }\n\n      if (rarityFilter === 'Normal') {\n        return savedCards.filter(({\n          cardRare\n        }) => cardRare === 'Normal'); // Retornado quando o usuário selecionar 'Normal', no dropdown.\n      }\n\n      if (rarityFilter === 'Raro') {\n        return savedCards.filter(({\n          cardRare\n        }) => cardRare === 'Raro'); // Retornado quando o usuário selecionar 'Raro', no dropdown.\n      }\n\n      if (rarityFilter === 'Muito Raro') {\n        return savedCards.filter(({\n          cardRare\n        }) => cardRare === 'Muito Raro'); // Retornado quando o usuário selecionar 'Muito Raro', no dropdown.\n      }\n\n      return savedCards; // Retornado quando o usuário não aplicar nenhum filtro.\n      // OBS: A função filtersFunction() será chamada dentro da <div><div /> \"cardsDisplay\", acompanhada de um .map().\n    };\n\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    const userSavedCards = localStorage.getItem('savedCards');\n\n    if (userSavedCards !== null) {\n      this.setState({\n        savedCards: JSON.parse(userSavedCards)\n      });\n    }\n  }\n\n  render() {\n    const {\n      cardName,\n      cardDescription,\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardImage,\n      cardRare,\n      cardTrunfo,\n      hasTrunfo,\n      isSaveButtonDisabled,\n      savedCards,\n      searchBoxData,\n      rarityFilter\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"cardDevelopmentContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"formContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Estruturar Nova Carta\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              cardName: cardName,\n              cardDescription: cardDescription,\n              cardAttr1: cardAttr1,\n              cardAttr2: cardAttr2,\n              cardAttr3: cardAttr3,\n              cardImage: cardImage,\n              cardRare: cardRare,\n              cardTrunfo: cardTrunfo,\n              hasTrunfo: hasTrunfo,\n              isSaveButtonDisabled: isSaveButtonDisabled,\n              onInputChange: this.onInputChange,\n              onCardTrunfoClick: this.onCardTrunfoClick,\n              onSaveButtonClick: this.onSaveButtonClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"cardPreviewContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Preview da Nova Carta\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Card, {\n              cardName: cardName,\n              cardDescription: cardDescription,\n              cardAttr1: cardAttr1,\n              cardAttr2: cardAttr2,\n              cardAttr3: cardAttr3,\n              cardImage: cardImage,\n              cardRare: cardRare,\n              cardTrunfo: cardTrunfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"savedCardsContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Filters, {\n            searchBoxData: searchBoxData,\n            onInputChange: this.onInputChange,\n            rarityFilter: rarityFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"cardsDisplay\",\n            children: savedCards !== undefined && this.filtersFunction().map(cardInfo => /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"eachDisplayedCard\",\n              children: [/*#__PURE__*/_jsxDEV(Card, {\n                cardName: cardInfo.cardName,\n                cardDescription: cardInfo.cardDescription,\n                cardAttr1: cardInfo.cardAttr1,\n                cardAttr2: cardInfo.cardAttr2,\n                cardAttr3: cardInfo.cardAttr3,\n                cardImage: cardInfo.cardImage,\n                cardRare: cardInfo.cardRare,\n                cardTrunfo: cardInfo.cardTrunfo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                id: cardInfo.cardName,\n                \"data-testid\": \"delete-button\",\n                type: \"button\",\n                onClick: this.deleteDisplayedCard,\n                children: \"Excluir\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this)]\n            }, cardInfo.cardName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/03_tryunfo/src/App.js"],"names":["React","Header","Form","Filters","Card","Footer","INITIAL_STATE","cardName","cardDescription","cardAttr1","cardAttr2","cardAttr3","cardImage","cardRare","cardTrunfo","hasTrunfo","isSaveButtonDisabled","savedCards","searchBoxData","rarityFilter","App","Component","constructor","verifyAllInputs","state","attrSum","Number","attrSumMaxValue","attrMin","attrMax","length","setState","onInputChange","target","name","formElementValue","type","checked","value","onSaveButtonClick","savedCardInfo","prevState","localStorage","setItem","JSON","stringify","deleteDisplayedCard","displayedCardId","id","toBeDel","find","cardInfo","newSC","filter","filtersFunction","toLowerCase","includes","componentDidMount","userSavedCards","getItem","parse","render","onCardTrunfoClick","undefined","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Filters from './components/Filters';\nimport Card from './components/Card';\nimport Footer from './components/Footer';\nimport './App.css';\n\nconst INITIAL_STATE = {\n  cardName: '',\n  cardDescription: '',\n  cardAttr1: '0',\n  cardAttr2: '0',\n  cardAttr3: '0',\n  cardImage: '',\n  cardRare: 'Normal',\n  cardTrunfo: false,\n  hasTrunfo: false,\n  isSaveButtonDisabled: true,\n  savedCards: [],\n  searchBoxData: '',\n  rarityFilter: 'Todas'\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    const userSavedCards = localStorage.getItem('savedCards');\n    if (userSavedCards !== null) {\n      this.setState({ savedCards: JSON.parse(userSavedCards) });\n    }\n  }\n\n  verifyAllInputs = () => { // Função que habilita o botão 'salvar', quando todos os campos do formulário forem preenchidos corretamente. Será chamada dentro da função onInputChange(), que é chamada dentro de escutadores do tipo 'onChange'.\n    const {\n      cardName,\n      cardDescription,\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardImage,\n      cardRare,\n    } = this.state;\n\n    const attrSum = Number(cardAttr1) + Number(cardAttr2) + Number(cardAttr3);\n    const attrSumMaxValue = 210;\n    const attrMin = 0;\n    const attrMax = 90;\n\n    if ((cardName.length >= 1)\n    && (cardDescription.length >= 1)\n    && (cardImage.length >= 1)\n    && (cardRare.length >= 1)\n    && (Number(cardAttr1) >= attrMin && Number(cardAttr1) <= attrMax)\n    && (Number(cardAttr2) >= attrMin && Number(cardAttr2) <= attrMax)\n    && (Number(cardAttr3) >= attrMin && Number(cardAttr3) <= attrMax)\n    && (attrSum <= attrSumMaxValue)) {\n      return this.setState({\n        isSaveButtonDisabled: false,\n      });\n    }\n    return this.setState({\n      isSaveButtonDisabled: true,\n    });\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ // Aprendi a utilizar o 2° parâmetro da setState() na matéria \"Ciclo de Vida dos Componentes\", ainda não dada. Em suma, assim que o estado for atualizado, a callback passada como argumento, será rodada.\n      [name]: formElementValue,\n    }, this.verifyAllInputs);\n  }\n\n  onSaveButtonClick = () => {\n    // Função que altera o estado 'hasTrunfo', de false para true, quando uma carta do tipo trunfo é salva.\n    // Função que salva as informações de uma respectiva carta, como um objeto dentro do array contido no estado 'savedCards'.\n    // Função que limpa os campos do formulário e o preview da carta.\n    const {\n      cardName,\n      cardDescription,\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardImage,\n      cardRare,\n      cardTrunfo,\n    } = this.state;\n\n    const savedCardInfo = {\n      cardName,\n      cardDescription,\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardImage,\n      cardRare,\n      cardTrunfo,\n    };\n\n    if (cardTrunfo === true) {\n      this.setState({ hasTrunfo: true });\n    }\n\n    this.setState((prevState) => ({\n      savedCards: [...prevState.savedCards, savedCardInfo],\n      cardName: '',\n      cardDescription: '',\n      cardAttr1: '0',\n      cardAttr2: '0',\n      cardAttr3: '0',\n      cardImage: '',\n      cardRare: 'Normal',\n      cardTrunfo: false,\n      isSaveButtonDisabled: true,\n    }), () => localStorage.setItem('savedCards', JSON.stringify(this.state.savedCards))); // Salvando o estado 'savedCards', no Local Storage.\n  }\n\n  deleteDisplayedCard = ({ target }) => { // Função que possibilita a exclusão de uma carta criada anteriormente.\n    const { savedCards } = this.state;\n    const displayedCardId = target.id;\n\n    const toBeDel = savedCards.find((cardInfo) => cardInfo.cardName === displayedCardId); // Retorna o objeto com as informações da carta recém-excluída.\n    const newSC = savedCards.filter((cardInfo) => cardInfo.cardName !== displayedCardId); // Retorna o array contido no estado 'savedCards', porém sem o objeto referente à carta que foi excluída.\n\n    if (toBeDel.cardTrunfo === true) {\n      this.setState({\n        savedCards: newSC,\n        hasTrunfo: false,\n      }, localStorage.setItem('savedCards', JSON.stringify(newSC))); // Salvando o estado 'savedCards', após a deleção, no Local Storage.\n    }\n    this.setState({ savedCards: newSC },);\n    // OBS: Caso a carta 'Super Trunfo' seja excluída, além de atualizar o estado 'savedCards' com o novo array de objetos 'newSC', o estado 'hasTrunfo' voltará a ser igual a False. Isso é importante para que o usuário seja capaz de criar uma nova carta do tipo 'Super Trunfo'.\n  }\n\n  filtersFunction = () => { // Tal função sempre retornará um array de objetos, que acumula informações de cada uma das cartas. Por outro lado, dependendo dos filtros aplicados pelo usuário, o respectivo array apresentará uma quantidade reduzida de objetos.\n    const { savedCards, searchBoxData, rarityFilter } = this.state;\n\n    if (searchBoxData.length >= 1) {\n      return savedCards.filter(({ cardName }) =>\n        cardName.toLowerCase().includes(searchBoxData.toLowerCase())); // Retornado quando o usuário pesquisar por uma determinada carta na searchbox.\n    }\n    if (rarityFilter === 'Normal') {\n      return savedCards.filter(({ cardRare }) => cardRare === 'Normal'); // Retornado quando o usuário selecionar 'Normal', no dropdown.\n    }\n    if (rarityFilter === 'Raro') {\n      return savedCards.filter(({ cardRare }) => cardRare === 'Raro'); // Retornado quando o usuário selecionar 'Raro', no dropdown.\n    }\n    if (rarityFilter === 'Muito Raro') {\n      return savedCards.filter(({ cardRare }) => cardRare === 'Muito Raro'); // Retornado quando o usuário selecionar 'Muito Raro', no dropdown.\n    }\n    return savedCards; // Retornado quando o usuário não aplicar nenhum filtro.\n\n    // OBS: A função filtersFunction() será chamada dentro da <div><div /> \"cardsDisplay\", acompanhada de um .map().\n  }\n\n  render() {\n    const {\n      cardName,\n      cardDescription,\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardImage,\n      cardRare,\n      cardTrunfo,\n      hasTrunfo,\n      isSaveButtonDisabled,\n      savedCards,\n      searchBoxData,\n      rarityFilter,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <main>\n          <section id=\"cardDevelopmentContainer\">\n            <div id=\"formContainer\">\n              <h3>Estruturar Nova Carta</h3>\n              <Form\n                cardName={ cardName } cardDescription={ cardDescription }\n                cardAttr1={ cardAttr1 } cardAttr2={ cardAttr2 }\n                cardAttr3={ cardAttr3 } cardImage={ cardImage }\n                cardRare={ cardRare } cardTrunfo={ cardTrunfo }\n                hasTrunfo={ hasTrunfo } isSaveButtonDisabled={ isSaveButtonDisabled }\n                onInputChange={ this.onInputChange } onCardTrunfoClick={ this.onCardTrunfoClick }\n                onSaveButtonClick={ this.onSaveButtonClick }\n              />\n            </div>\n            <div id=\"cardPreviewContainer\">\n              <h3>Preview da Nova Carta</h3>\n              <Card\n                cardName={ cardName } cardDescription={ cardDescription }\n                cardAttr1={ cardAttr1 } cardAttr2={ cardAttr2 }\n                cardAttr3={ cardAttr3 } cardImage={ cardImage }\n                cardRare={ cardRare } cardTrunfo={ cardTrunfo }\n              />\n            </div>\n          </section>\n          <section id=\"savedCardsContainer\">\n            <Filters \n              searchBoxData={ searchBoxData } onInputChange={ this.onInputChange }\n              rarityFilter={ rarityFilter }\n            />\n            <div id=\"cardsDisplay\">\n              { savedCards !== undefined \n                && this.filtersFunction().map((cardInfo) => (\n                <div key={ cardInfo.cardName } id=\"eachDisplayedCard\">\n                  <Card\n                    cardName={ cardInfo.cardName } cardDescription={ cardInfo.cardDescription }\n                    cardAttr1={ cardInfo.cardAttr1 } cardAttr2={ cardInfo.cardAttr2 }\n                    cardAttr3={ cardInfo.cardAttr3 } cardImage={ cardInfo.cardImage }\n                    cardRare={ cardInfo.cardRare } cardTrunfo={ cardInfo.cardTrunfo }\n                  />\n                  <button\n                    id={ cardInfo.cardName }\n                    data-testid=\"delete-button\"\n                    type=\"button\"\n                    onClick={ this.deleteDisplayedCard }\n                  >\n                    Excluir\n                  </button>\n                </div>\n              ))}\n            </div>\n          </section>\n        </main>\n          <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}